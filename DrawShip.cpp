#include "DrawShip.h"


namespace sbat
{
	sbat::DrawShip::DrawShip()
		:
		m_hiden(0),
		m_sprite(),
		m_textures(nullptr)
	{

	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//DESTRUCTOR

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	sbat::DrawShip::~DrawShip()
	{

	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//MY

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void sbat::DrawShip::set_ship_texture(std::vector<sf::Texture>& ship_textures)
	{
		m_textures = &ship_textures;
		this->m_sprite.setTexture(((*m_textures)[static_cast<int>(this->get_ship_type()) - 1]));
		this->set_ship_facing(this->get_ship_facing());
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	sf::FloatRect sbat::DrawShip::get_global_bounds()
	{
		return this->get_Transfrom().transformRect(this->get_local_bounds());
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	sf::FloatRect sbat::DrawShip::get_local_bounds()
	{
		return this->m_sprite.getGlobalBounds();
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void sbat::DrawShip::show()
	{
		this->m_hiden = 0;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void sbat::DrawShip::hide()
	{
		this->m_hiden = 1;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void	sbat::DrawShip::set_ship_type(const sbat::ShipType& type)
	{
		BaseShip::set_ship_type(type);
		this->m_sprite.setTexture(((*m_textures)[static_cast<int>(this->get_ship_type()) - 1]));
		this->m_sprite.setTextureRect(sf::IntRect(0, 0, static_cast<int>(((*m_textures)[static_cast<int>(this->get_ship_type()) - 1]).getSize().x), static_cast<int>(((*m_textures)[static_cast<int>(this->get_ship_type()) - 1]).getSize().y)));
		this->set_ship_facing(this->get_ship_facing());

	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void	sbat::DrawShip::set_ship_facing(const sbat::ShipFacing& rotation)
	{

		BaseShip::set_ship_facing(rotation);
		if (get_ship_facing() == sbat::ShipFacing::RIGHT)
		{
			this->m_sprite.setRotation(180);
			this->m_sprite.setPosition(static_cast<int>(this->m_sprite.getLocalBounds().width), static_cast<int>(this->m_sprite.getLocalBounds().height));

		}
		else if (get_ship_facing() == sbat::ShipFacing::DOWN)
		{
			this->m_sprite.setRotation(270);
			this->m_sprite.setPosition(0, static_cast<int>(m_sprite.getLocalBounds().width));
		}
		else if (get_ship_facing() == sbat::ShipFacing::LEFT)
		{
			this->m_sprite.setRotation(0);
			this->m_sprite.setPosition(0, 0);

		}
		else if (get_ship_facing() == sbat::ShipFacing::UP)
		{
			this->m_sprite.setRotation(90);
			this->m_sprite.setPosition(static_cast<int>(m_sprite.getLocalBounds().height), 0);
		}
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//UPDATABLE

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void sbat::DrawShip::update(sf::RenderWindow& window, const float& dt, const sf::Event* event)
	{

	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//DRAWABLE

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void	sbat::DrawShip::draw(sf::RenderTarget& target, sf::RenderStates states) const
	{
		states.transform *= get_Transfrom();

		if (!m_hiden)
		{
			target.draw(m_sprite, states);
		}

	}

}

